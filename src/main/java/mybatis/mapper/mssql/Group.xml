<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.enixone.enixClever.cms.was.dao.GroupDao">

    <!--
    ============================
    =   EC_GROUP 관련 쿼리
    ============================
    -->
    <!-- 루트 그룹 목록 조회 -->
    <select id="selectRootGroupList" resultMap="commonSql.Group">
        SELECT
            G.GROUP_ID, 
            G.GROUP_NAME, 
            G.PARENT_GROUP_ID, 
            G.GROUP_FOLDER_ID, 
            PARENT_GROUP_NAME = '최상위부서',
            CONVERT(CHAR(10), G.CREATE_DATE, 23) AS CREATE_DATE, 
            CONVERT(CHAR(10), G.UPDATE_DATE, 23) AS UPDATE_DATE, 
            G.BOX_ID,
            G.STATUS_CODE, 
            (SELECT EC.CODE_NAME FROM EC_CODE EC WHERE EC.CODE_GROUP = 'DOCUMENT_STATUS' AND EC.CODE = G.STATUS_CODE) AS STATUS_CODE_NAME,
            (SELECT COUNT(*) FROM EC_GROUP WHERE PARENT_GROUP_ID = G.GROUP_ID) AS CHILD_COUNT
        FROM EC_GROUP G
        WHERE PARENT_GROUP_ID = '_TOP'
    </select>
    
    <!-- 전체 부서 목록 조회 -->
    <select id="selectAllGroupList" resultMap="commonSql.Group">
        SELECT
            G.GROUP_ID, G.GROUP_NAME, G.PARENT_GROUP_ID, G.GROUP_FOLDER_ID, G.CREATE_DATE, G.UPDATE_DATE, G.BOX_ID,
            G.STATUS_CODE, (SELECT EC.CODE_NAME FROM EC_CODE EC WHERE EC.CODE_GROUP = 'DOCUMENT_STATUS' AND EC.CODE = G.STATUS_CODE) AS STATUS_CODE_NAME,
            (SELECT COUNT(*) FROM EC_GROUP WHERE PARENT_GROUP_ID = G.GROUP_ID) AS CHILD_COUNT
        FROM EC_GROUP G
        WHERE BOX_ID = 'BOX_GROUP'
    </select>

    <!-- 하위 그룹 목록 조회 -->
    <select id="selectChildGroupList" resultMap="commonSql.Group">
        SELECT
            G.GROUP_ID, 
            G.GROUP_NAME, 
            G.GROUP_FOLDER_ID, 
            CONVERT(CHAR(10), G.CREATE_DATE, 23) AS CREATE_DATE, 
            CONVERT(CHAR(10), G.UPDATE_DATE, 23) AS UPDATE_DATE, 
            G.BOX_ID,
            G.PARENT_GROUP_ID, 
            (SELECT GROUP_NAME FROM EC_GROUP WHERE GROUP_ID = G.PARENT_GROUP_ID) AS PARENT_GROUP_NAME,
            G.STATUS_CODE, (SELECT EC.CODE_NAME FROM EC_CODE EC WHERE EC.CODE_GROUP = 'DOCUMENT_STATUS' AND EC.CODE = G.STATUS_CODE) AS STATUS_CODE_NAME,
            (SELECT COUNT(*) FROM EC_GROUP WHERE PARENT_GROUP_ID = G.GROUP_ID) AS CHILD_COUNT,
            (SELECT COUNT(*) FROM EC_GROUP_ASSIGN WHERE GROUP_ID = G.GROUP_ID) AS USER_COUNT
        FROM EC_GROUP G
        WHERE PARENT_GROUP_ID = #{parentGroupId}
    </select>

	<!-- 그룹명으로 조회 autocoplete에서 사용 -->
    <select id="selectGroupListByGroupName" resultMap="commonSql.Group">
        SELECT
		    GROUP_ID, GROUP_NAME, GROUP_FOLDER_ID
		FROM EC_GROUP
		WHERE GROUP_NAME LIKE '%' + #{folderName} + '%' ORDER BY GROUP_NAME ASC
    </select>
    
	<!-- 그룹명으로 조회 autocoplete에서 사용 -->
    <select id="searchGroupList" resultMap="commonSql.Group">
        SELECT 
			GROUP_ID,
			GROUP_NAME,
			PARENT_GROUP_ID,
			(SELECT GROUP_NAME FROM EC_GROUP WHERE GROUP_ID = EG.PARENT_GROUP_ID) AS PARENT_GROUP_NAME
		FROM EC_GROUP EG
			WHERE GROUP_NAME LIKE '%${groupName}%'
    </select>


    <!-- 그룹 상세 조회 -->
    <select id="selectGroupInfo" resultMap="commonSql.Group">
        SELECT
            G.GROUP_ID, G.GROUP_NAME, G.GROUP_FOLDER_ID, G.CREATE_DATE, G.UPDATE_DATE, G.BOX_ID,
            G.PARENT_GROUP_ID, (SELECT GROUP_NAME FROM EC_GROUP WHERE GROUP_ID = G.PARENT_GROUP_ID) AS PARENT_GROUP_NAME,
            G.STATUS_CODE, (SELECT EC.CODE_NAME FROM EC_CODE EC WHERE EC.CODE_GROUP = 'DOCUMENT_STATUS' AND EC.CODE = G.STATUS_CODE) AS STATUS_CODE_NAME,
            (SELECT COUNT(*) FROM EC_GROUP WHERE PARENT_GROUP_ID = G.GROUP_ID) AS CHILD_COUNT,
            (SELECT COUNT(*) FROM EC_GROUP_ASSIGN WHERE GROUP_ID = G.GROUP_ID) AS USER_COUNT
        FROM EC_GROUP G
        WHERE GROUP_ID = #{groupId}
    </select>

    <!-- 그룹 등록 -->
    <insert id="insertGroup" parameterType="Group">
        INSERT INTO EC_GROUP
        (
            GROUP_ID, GROUP_NAME, PARENT_GROUP_ID, GROUP_FOLDER_ID, BOX_ID, STATUS_CODE, CREATE_DATE
        )
        VALUES
        (
            #{groupId}, #{groupName}, #{parentGroupId}, #{groupFolderId}, #{boxId}, #{statusCode}, GETDATE()
        )
    </insert>

    <!-- 그룹 수정 -->
    <update id="updateGroup" parameterType="Group">
        UPDATE EC_GROUP
        <trim prefix="SET" suffixOverrides=",">
            <if test = "groupName != null and groupName != ''"> GROUP_NAME = #{groupName},</if>
            <if test = "parentGroupId != null and parentGroupId != ''"> PARENT_GROUP_ID = #{parentGroupId},</if>
            <if test = "groupFolderId != null and groupFolderId != ''"> GROUP_FOLDER_ID = #{groupFolderId},</if>
            <if test = "statusCode != null and statusCode != ''"> STATUS_CODE = #{statusCode},</if>
            UPDATE_DATE = GETDATE(),
        </trim>
        WHERE
        GROUP_ID = #{groupId}
    </update>

    <!-- 그룹 삭제 -->
    <delete id="deleteGroup" parameterType="Group">
        DELETE FROM EC_GROUP
        	WHERE
        GROUP_ID = #{groupId}
    </delete>


    <!--
    ======================================
    =   EC_GROUP_ASSIGN 관련 쿼리
    ======================================
    -->

    <insert id="insertAssignDept">
        INSERT INTO EC_GROUP_ASSIGN
        (USER_KEY, GROUP_ID, IS_MAIN)
        VALUES
        (#{userKey}, #{groupId}, #{isMain})
    </insert>

    <select id="selectAssignDept" resultMap="commonSql.AssignDept">
        SELECT USER_KEY, GROUP_ID, IS_MAIN
        FROM EC_GROUP_ASSIGN
        WHERE
            USER_KEY = #{userKey}
            AND GROUP_ID = #{groupId}
    </select>




</mapper>